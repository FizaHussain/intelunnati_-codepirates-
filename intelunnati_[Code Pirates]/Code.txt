module ElectricityBillPaymentMachine(
  input wire clk,
  input wire reset,
  input wire start_payment,
  input wire [7:0] bill_amount,
  output reg [7:0] remaining_amount,
  output reg payment_complete
);

  // Internal registers
  reg [7:0] current_amount;
  reg [7:0] paid_amount;

  // State definitions
  localparam IDLE = 2'b00;
  localparam PAYMENT_IN_PROGRESS = 2'b01;
  localparam PAYMENT_COMPLETE = 2'b10;

  // Current state register
  reg [1:0] state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      state <= IDLE;
      current_amount <= 8'd0;
      paid_amount <= 8'd0;
      remaining_amount <= 8'd0;
      payment_complete <= 1'b0;
    end else begin
      case (state)
        IDLE:
          if (start_payment) begin
            state <= PAYMENT_IN_PROGRESS;
            current_amount <= bill_amount;
            paid_amount <= 8'd0;
            remaining_amount <= bill_amount;
            payment_complete <= 1'b0;
          end
        PAYMENT_IN_PROGRESS:
          if (current_amount > 8'd0 && start_payment) begin
            state <= PAYMENT_IN_PROGRESS;
            current_amount <= current_amount - 8'd1;
            paid_amount <= paid_amount + 8'd1;
            remaining_amount <= current_amount - 8'd1;
            payment_complete <= 1'b0;
          end else if (current_amount == 8'd0) begin
            state <= PAYMENT_COMPLETE;
            remaining_amount <= 8'd0;
            payment_complete <= 1'b1;
          end
        PAYMENT_COMPLETE:
          if (start_payment) begin
            state <= IDLE;
            current_amount <= 8'd0;
            paid_amount <= 8'd0;
            remaining_amount <= 8'd0;
            payment_complete <= 1'b0;
          end
      endcase
    end
  end

endmodule
